function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}

var re = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;


var EMAIL_REGEX = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

function emailCheck(value, expectedValue, expectedMismatch, multiple)
{
    var i = document.createElement('input');
    var i2 = document.createElement('input');

    i.type = 'email';
    i.value = i2.value = value;
    i.multiple = !!multiple;
    var mismatch = i.validity.typeMismatch;
    var mismatchPass = mismatch == expectedMismatch;
    var sanitizePass = i.value == expectedValue;
    var mismatchResult = '"' + value + '" is a ' + (mismatch ? 'invalid' : 'valid') + ' email address' + (multiple ? ' list. ' : '. ');
    var sanitizeResult = 'It was sanitized to "' + i.value + '"' + (sanitizePass ? '.' : ', but should be sanitized to "' + expectedValue + '"');
    var result = mismatchResult
    if (value != expectedValue || !sanitizePass)
        result += sanitizeResult

    i2.className = EMAIL_REGEX.test(expectedValue) !== expectedMismatch ? 'valid' : 'invalid'
    
    if (mismatchPass){
    	    i.className = 'valid'
    } else {
     	    i.className = 'invalid'
    }
    browser.appendChild(i)
    regex.appendChild(i2)
}

function debug(txt){
    var h3 = document.createElement('h3')
    var pBrowser = document.createElement('p')
    var pRegex = document.createElement('p')
    h3.innerText = txt
    pBrowser.innerText = "Your browser"
    pRegex.innerText = "Your regex"
    
    browser = document.createElement('div')
    regex = document.createElement('div')
    
    document.body.appendChild(h3)
    browser.appendChild(pBrowser)
    document.body.appendChild(browser)
    regex.appendChild(pRegex)
    document.body.appendChild(regex)
}

var browser
var regex
var expectValid = false;
var expectInvalid = true;
var multiple = true;

debug("Valid single addresses when 'multiple' attribute is not set.");
emailCheck("something@something.com", "something@something.com", expectValid);
emailCheck("someone@localhost.localdomain", "someone@localhost.localdomain", expectValid);
emailCheck("someone@127.0.0.1", "someone@127.0.0.1", expectValid);
emailCheck("a@b.b", "a@b.b", expectValid);
emailCheck("a/b@domain.com", "a/b@domain.com", expectValid);
emailCheck("{}@domain.com", "{}@domain.com", expectValid);
emailCheck("m*'!%@something.sa", "m*'!%@something.sa", expectValid);
emailCheck("tu!!7n7.ad##0!!!@company.ca", "tu!!7n7.ad##0!!!@company.ca", expectValid);
emailCheck("%@com.com", "%@com.com", expectValid);
emailCheck("!#$%&'*+/=?^_`{|}~.-@com.com", "!#$%&'*+/=?^_`{|}~.-@com.com", expectValid);
emailCheck(".wooly@example.com", ".wooly@example.com", expectValid);
emailCheck("wo..oly@example.com", "wo..oly@example.com", expectValid);
emailCheck("someone@do-ma-in.com", "someone@do-ma-in.com", expectValid);
emailCheck("somebody@example", "somebody@example", expectValid);
emailCheck("\u000Aa@p.com\u000A", "a@p.com", expectValid);
emailCheck("\u000Da@p.com\u000D", "a@p.com", expectValid);
emailCheck("a\u000A@p.com", "a@p.com", expectValid);
emailCheck("a\u000D@p.com", "a@p.com", expectValid);
emailCheck("", "", expectValid);
emailCheck(" ", "", expectValid);
emailCheck(" a@p.com", "a@p.com", expectValid);
emailCheck("a@p.com ", "a@p.com", expectValid);
emailCheck(" a@p.com ", "a@p.com", expectValid);
emailCheck("\u0020a@p.com\u0020", "a@p.com", expectValid);
emailCheck("\u0009a@p.com\u0009", "a@p.com", expectValid);
emailCheck("\u000Ca@p.com\u000C", "a@p.com", expectValid);

debug("Invalid single addresses when 'multiple' attribute is not set.");
emailCheck("invalid:email@example.com", "invalid:email@example.com", expectInvalid);
emailCheck("@somewhere.com", "@somewhere.com", expectInvalid);
emailCheck("example.com", "example.com", expectInvalid);
emailCheck("@@example.com", "@@example.com", expectInvalid);
emailCheck("a space@example.com", "a space@example.com", expectInvalid);
emailCheck("something@ex..ample.com", "something@ex..ample.com", expectInvalid);
emailCheck("a\b@c", "a\b@c", expectInvalid);
emailCheck("someone@somewhere.com.", "someone@somewhere.com.", expectInvalid);
emailCheck("\"\"test\blah\"\"@example.com", "\"\"test\blah\"\"@example.com", expectInvalid);
emailCheck("\"testblah\"@example.com", "\"testblah\"@example.com", expectInvalid);
emailCheck("someone@somewhere.com@", "someone@somewhere.com@", expectInvalid);
emailCheck("someone@somewhere_com", "someone@somewhere_com", expectInvalid);
emailCheck("someone@some:where.com", "someone@some:where.com", expectInvalid);
emailCheck(".", ".", expectInvalid);
emailCheck("F/s/f/a@feo+re.com", "F/s/f/a@feo+re.com", expectInvalid);
emailCheck("some+long+email+address@some+host-weird-/looking.com", "some+long+email+address@some+host-weird-/looking.com", expectInvalid);
emailCheck("a @p.com", "a @p.com", expectInvalid);
emailCheck("a\u0020@p.com", "a\u0020@p.com", expectInvalid);
emailCheck("a\u0009@p.com", "a\u0009@p.com", expectInvalid);
emailCheck("a\u000B@p.com", "a\u000B@p.com", expectInvalid);
emailCheck("a\u000C@p.com", "a\u000C@p.com", expectInvalid);
emailCheck("a\u2003@p.com", "a\u2003@p.com", expectInvalid);
emailCheck("a\u3000@p.com", "a\u3000@p.com", expectInvalid);
emailCheck("ddjk-s-jk@asl-.com", "ddjk-s-jk@asl-.com", expectInvalid);
emailCheck("someone@do-.com", "someone@do-.com", expectInvalid);
emailCheck("somebody@-p.com", "somebody@-p.com", expectInvalid);
emailCheck("somebody@-.com", "somebody@-.com", expectInvalid);

debug("Valid single addresses when 'multiple' attribute is set.");
emailCheck("something@something.com", "something@something.com", expectValid, multiple);
emailCheck("someone@localhost.localdomain", "someone@localhost.localdomain", expectValid, multiple);
emailCheck("someone@127.0.0.1", "someone@127.0.0.1", expectValid, multiple);
emailCheck("a@b.b", "a@b.b", expectValid, multiple);
emailCheck("a/b@domain.com", "a/b@domain.com", expectValid, multiple);
emailCheck("{}@domain.com", "{}@domain.com", expectValid, multiple);
emailCheck("m*'!%@something.sa", "m*'!%@something.sa", expectValid, multiple);
emailCheck("tu!!7n7.ad##0!!!@company.ca", "tu!!7n7.ad##0!!!@company.ca", expectValid, multiple);
emailCheck("%@com.com", "%@com.com", expectValid, multiple);
emailCheck("!#$%&'*+/=?^_`{|}~.-@com.com", "!#$%&'*+/=?^_`{|}~.-@com.com", expectValid, multiple);
emailCheck(".wooly@example.com", ".wooly@example.com", expectValid, multiple);
emailCheck("wo..oly@example.com", "wo..oly@example.com", expectValid, multiple);
emailCheck("someone@do-ma-in.com", "someone@do-ma-in.com", expectValid, multiple);
emailCheck("somebody@example", "somebody@example", expectValid, multiple);
emailCheck("\u0020a@p.com\u0020", "a@p.com", expectValid, multiple);
emailCheck("\u0009a@p.com\u0009", "a@p.com", expectValid, multiple);
emailCheck("\u000Aa@p.com\u000A", "a@p.com", expectValid, multiple);
emailCheck("\u000Ca@p.com\u000C", "a@p.com", expectValid, multiple);
emailCheck("\u000Da@p.com\u000D", "a@p.com", expectValid, multiple);
emailCheck("a\u000A@p.com", "a@p.com", expectValid, multiple);
emailCheck("a\u000D@p.com", "a@p.com", expectValid, multiple);
emailCheck("", "", expectValid, multiple);
emailCheck(" ", "", expectValid, multiple);
emailCheck(" a@p.com", "a@p.com", expectValid, multiple);
emailCheck("a@p.com ", "a@p.com", expectValid, multiple);
emailCheck(" a@p.com ", "a@p.com", expectValid, multiple);

debug("Invalid single addresses when 'multiple' attribute is set.");
emailCheck("invalid:email@example.com", "invalid:email@example.com", expectInvalid, multiple);
emailCheck("@somewhere.com", "@somewhere.com", expectInvalid, multiple);
emailCheck("example.com", "example.com", expectInvalid, multiple);
emailCheck("@@example.com", "@@example.com", expectInvalid, multiple);
emailCheck("a space@example.com", "a space@example.com", expectInvalid, multiple);
emailCheck("something@ex..ample.com", "something@ex..ample.com", expectInvalid, multiple);
emailCheck("a\b@c", "a\b@c", expectInvalid, multiple);
emailCheck("someone@somewhere.com.", "someone@somewhere.com.", expectInvalid, multiple);
emailCheck("\"\"test\blah\"\"@example.com", "\"\"test\blah\"\"@example.com", expectInvalid, multiple);
emailCheck("\"testblah\"@example.com", "\"testblah\"@example.com", expectInvalid, multiple);
emailCheck("someone@somewhere.com@", "someone@somewhere.com@", expectInvalid, multiple);
emailCheck("someone@somewhere_com", "someone@somewhere_com", expectInvalid, multiple);
emailCheck("someone@some:where.com", "someone@some:where.com", expectInvalid, multiple);
emailCheck(".", ".", expectInvalid, multiple);
emailCheck("F/s/f/a@feo+re.com", "F/s/f/a@feo+re.com", expectInvalid, multiple);
emailCheck("some+long+email+address@some+host-weird-/looking.com", "some+long+email+address@some+host-weird-/looking.com", expectInvalid, multiple);
emailCheck("\u000Ba@p.com\u000B", "\u000Ba@p.com\u000B", expectInvalid, multiple);
emailCheck("\u2003a@p.com\u2003", "\u2003a@p.com\u2003", expectInvalid, multiple);
emailCheck("\u3000a@p.com\u3000", "\u3000a@p.com\u3000", expectInvalid, multiple);
emailCheck("a @p.com", "a @p.com", expectInvalid, multiple);
emailCheck("a\u0020@p.com", "a\u0020@p.com", expectInvalid, multiple);
emailCheck("a\u0009@p.com", "a\u0009@p.com", expectInvalid, multiple);
emailCheck("a\u000B@p.com", "a\u000B@p.com", expectInvalid, multiple);
emailCheck("a\u000C@p.com", "a\u000C@p.com", expectInvalid, multiple);
emailCheck("a\u2003@p.com", "a\u2003@p.com", expectInvalid, multiple);
emailCheck("a\u3000@p.com", "a\u3000@p.com", expectInvalid, multiple);
emailCheck("ddjk-s-jk@asl-.com", "ddjk-s-jk@asl-.com", expectInvalid, multiple);
emailCheck("someone@do-.com", "someone@do-.com", expectInvalid, multiple);
emailCheck("somebody@-p.com", "somebody@-p.com", expectInvalid, multiple);
emailCheck("somebody@-.com", "somebody@-.com", expectInvalid, multiple);

debug("Valid multiple addresses when 'multiple' attribute is set.");
emailCheck("someone@somewhere.com,john@doe.com,a@b.c,a/b@c.c,ualla@ualla.127", "someone@somewhere.com,john@doe.com,a@b.c,a/b@c.c,ualla@ualla.127", expectValid, multiple);
emailCheck("tu!!7n7.ad##0!!!@company.ca,F/s/f/a@feo-re.com,m*'@a.b", "tu!!7n7.ad##0!!!@company.ca,F/s/f/a@feo-re.com,m*'@a.b", expectValid, multiple);
emailCheck(" a@p.com,b@p.com", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("a@p.com ,b@p.com", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("a@p.com, b@p.com", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("a@p.com,b@p.com ", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("   a@p.com   ,   b@p.com   ", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("\u0020a@p.com\u0020,\u0020b@p.com\u0020", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("\u0009a@p.com\u0009,\u0009b@p.com\u0009", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("\u000Aa@p.com\u000A,\u000Ab@p.com\u000A", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("\u000Ca@p.com\u000C,\u000Cb@p.com\u000C", "a@p.com,b@p.com", expectValid, multiple);
emailCheck("\u000Da@p.com\u000D,\u000Db@p.com\u000D", "a@p.com,b@p.com", expectValid, multiple);

debug("Invalid multiple addresses when 'multiple' attribute is set.");
emailCheck("someone@somewhere.com,john@doe..com,a@b,a/b@c,ualla@ualla.127", "someone@somewhere.com,john@doe..com,a@b,a/b@c,ualla@ualla.127", expectInvalid, multiple);
emailCheck("some+long+email+address@some+host:weird-/looking.com,F/s/f/a@feo+re.com,,m*'@'!%", "some+long+email+address@some+host:weird-/looking.com,F/s/f/a@feo+re.com,,m*'@'!%", expectInvalid, multiple);
emailCheck("   a @p.com   ,   b@p.com   ", "a @p.com,b@p.com", expectInvalid, multiple);
emailCheck("   a@p.com   ,   b @p.com   ", "a@p.com,b @p.com", expectInvalid, multiple);
emailCheck("\u000Ba@p.com\u000B,\u000Bb@p.com\u000B", "\u000Ba@p.com\u000B,\u000Bb@p.com\u000B", expectInvalid, multiple);
emailCheck("\u2003a@p.com\u2003,\u2003b@p.com\u2003", "\u2003a@p.com\u2003,\u2003b@p.com\u2003", expectInvalid, multiple);
emailCheck("\u3000a@p.com\u3000,\u3000b@p.com\u3000", "\u3000a@p.com\u3000,\u3000b@p.com\u3000", expectInvalid, multiple);
emailCheck(",,", ",,", expectInvalid, multiple);
emailCheck(" ,,", ",,", expectInvalid, multiple);
emailCheck(", ,", ",,", expectInvalid, multiple);
emailCheck(",, ", ",,", expectInvalid, multiple);
emailCheck("  ,  ,  ", ",,", expectInvalid, multiple);
emailCheck("\u0020,\u0020,\u0020", ",,", expectInvalid, multiple);
emailCheck("\u0009,\u0009,\u0009", ",,", expectInvalid, multiple);
emailCheck("\u000A,\u000A,\u000A", ",,", expectInvalid, multiple);
emailCheck("\u000B,\u000B,\u000B", "\u000B,\u000B,\u000B", expectInvalid, multiple);
emailCheck("\u000C,\u000C,\u000C", ",,", expectInvalid, multiple);
emailCheck("\u000D,\u000D,\u000D", ",,", expectInvalid, multiple);
emailCheck("\u2003,\u2003,\u2003", "\u2003,\u2003,\u2003", expectInvalid, multiple);
emailCheck("\u3000,\u3000,\u3000", "\u3000,\u3000,\u3000", expectInvalid, multiple);


import { validateEmail, validateUrl } from '../utils/validationUtils';

// Test the validateEmail method from validationUtils.js file with different test cases.
export const validateEmailTest = () => {
    const arrayCases = [{
            validEmails: [
                'simple@example.com',
                'very.common@example.com',
                'disposable.style.email.with+symbol@example.com',
                'other.email-with-hyphen@example.com',
                'fully-qualified-domain@example.com',
                'user.name+tag+sorting@example.com',
                'x@example.com',
                '"very.(),:;<>[]\".VERY.\"very@\\',
                '\"very\".unusual"@strange.example.com',
                'example-indeed@strange-example.com',
                'admin@mailserver1',
                '#!$%&\'*+-/=?^_`{}|~@example.org',
                '"()<>[]:,;@\\\"!#$%&\'-/=?^_\`{}| ~.a"@example.org',
                'example@s.example',
                'user@[2001:DB8::1]',
                '" "@example.org',
                'email@domain.com',
                'firstname.lastname@domain.com',
                'email@subdomain.domain.com',
                'firstname+lastname@domain.com',
                'email@123.123.123.123',
                'email@[123.123.123.123]',
                '"email"@domain.com',
                '1234567890@domain.com',
                'email@domain-one.com',
                '_______@domain.com',
                'email@domain.name',
                'email@domain.co.jp',
                'firstname-lastname@domain.com',
                'Jim.O’Shea@domain.com',
                '(email@domain.com',
                'email@domain).com',
                'test@domain.com',
                'lastname@domain.com',
                'test.email.with+symbol@domain.com',
                'id-with-dash@domain.com',
                'a@domain.com',
                '"abc.test email"@domain.com',
                '"xyz.test.@.test.com"@domain.com',
                '"abc.(),:;<>[]\".EMAIL.\"email@\ ',
                '\"email\".test"@strange.domain.com',
                'example-abc@abc-domain.com',
                'admin@mailserver1',
                '#!$%&\'*+-/=?^_{}|~@domain.org',
                '“()<>[]:,;@\\”!#$%&’-/=?^_`{}| ~.a”@domain.org',
                '” “@domain.org',
                'example@localhost',
                'example@s.solutions',
                'test@com',
                'test@localserver',
                'test@[IPv6:2018:db8::1]',
                'david.jones@proseware.com',
                'd.j@server1.proseware.com',
                'jones@ms1.proseware.com',
                'j@proseware.com9',
                'js#internal@proseware.com',
                'j_9@[129.126.118.1]',
                'js@proseware.com9',
                'j.s@server1.proseware.com',
                '"j\"s\""@proseware.com',
                'js@contoso.ä¸­å›½',
                'ma_i32l@ma_42il.coa.uk',
                'aaa@aaa.com',
                'a@a.co',
                'prettyandsimple@example.com',
                'very.common@example.com',
                'disposable.style.email.with+symbol@example.com',
                'other.email-with-dash@example.com',
                'office@RLS.ninja'
            ]
        },
        {
            invalidEmails: [
                'plainaddress',
                '#@%^%#$@#$@#.com',
                '@example.com',
                'Joe Smith <email@example.com>',
                'email.example.com',
                'email@example@example.com',
                '.email@example.com',
                'email.@example.com',
                'email..email@example.com',
                'あいうえお@example.com',
                'email@example.com (Joe Smith)',
                'email@example',
                'email@-example.com',
                'email@example.web',
                'email@111.222.333.44444',
                'email@example..com',
                'Abc..123@example.com',
                'Abc.example.com',
                'A@b@c@example.com',
                'a"b(c)d,e:f;g<h>i[j\k]l@example.com',
                'just"not"right@example.com',
                'this is"not\allowed@example.com',
                'this\ still\"not\\allowed@example.com',
                '1234567890123456789012345678901234567890123456789012345678901234+x@example.com',
                'john..doe@example.com',
                'john.doe@example..com',
                'plainaddress',
                '#@%^%#$@#$@#.com',
                '@domain.com',
                'Joe Smith <email@domain.com>',
                'email.domain.com',
                'email@domain@domain.com',
                '.email@domain.com',
                'email.@domain.com',
                'email..email@domain.com',
                'あいうえお@domain.com',
                'email@domain.com',
                'email@domain',
                'email@-domain.com',
                'email@domain.web',
                'email@111.222.333.44444',
                'email@domain..com',
                'much.”more\ unusual”@example.com',
                'very.unusual.”@”.unusual.com@example.com',
                'very.”(),:;<>[]”.VERY.”very@\\',
                '"very”.unusual@strange.example.com',
                '”(),:;<>[\]@example.com',
                'just”not”right@example.com',
                'this\ is"really"not\allowed@example.com',
                'example.com',
                'A@b@c@domain.com',
                'a”b(c)d,e:f;gi[j\k]l@domain.com',
                'abc”test”email@domain.com',
                'abc is”not\valid@domain.com',
                'abc\ is\”not\valid@domain.com',
                '.test@domain.com',
                'test@domain..com',
                'j.@server1.proseware.com',
                'j..s@proseware.com',
                'js*@proseware.com',
                'js@proseware..com'
            ]
        },
        {
            unknownStateEmails: [
                '#!$%&\'*+-/=?^_`{}|~@example.org',
                '"()[]:,;@\\\"!#$%&\'*+-/=?^_\`{}| ~.a"@example.org',
                '" "@example.org',
                'üñîçøðé@example.com',
                'üñîçøðé@üñîçøðé.com',
                'Pelé@example.com',
                'δοκιμή@παράδειγμα.δοκιμή',
                '我買@屋企.香港',
                '甲斐@黒川.日本',
                'чебурашка@ящик-с-апельсинами.рф'
            ]

        }
    ];

    const resultArrays = [];
    arrayCases.forEach((emailsArray, i) => {
        const resultArray = [];
        const property = i === 0 ? 'validEmails' : i === 1 ? 'invalidEmails' : 'unknownStateEmails';
        emailsArray[property].forEach(email => {
            resultArray.push({
                emailCase: email,
                expectedResult: i === 0 ? true : i === 1 ? false : 'unknown',
                actualResult: validateEmail(email)
            });
        });

        const caseArray = i === 0 ? 'valid cases' : i === 1 ? 'invalid cases' : 'unknown cases';
        resultArrays.push({
            arrayType: caseArray,
            resultArray: resultArray
        });
    });

    console.log(resultArrays);
};